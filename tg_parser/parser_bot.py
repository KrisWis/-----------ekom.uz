from aiogram.types import Message, ReplyKeyboardMarkup, InlineKeyboardMarkup, CallbackQuery, InputTextMessageContent, InlineQueryResultArticle, InlineQuery
import logging.handlers
import logging
import os
import aiogram
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.utils import executor
from aiogram.dispatcher import FSMContext
from parser_ekom_uz import categories, html, get_items
import urllib.request


# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ.
logger = logging.getLogger(__name__)

# –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
os.makedirs("Logs", exist_ok=True)

# C–æ–∑–¥–∞—ë—Ç –≤—Å–µ –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ –∫–∞—Ç–∞–ª–æ–≥–∏, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç.
logging.basicConfig(  # –ß—Ç–æ–±—ã –±–æ—Ç —Ä–∞–±–æ—Ç–∞–ª —É—Å–ø–µ—à–Ω–æ, —Å–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ñ–∏–≥ —Å –±–∞–∑–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –¥–ª—è –±–æ—Ç–∞
    level=logging.INFO,
    format="[%(levelname)-8s %(asctime)s at           %(funcName)s]: %(message)s",
    datefmt="%d.%d.%Y %H:%M:%S",
    handlers=[logging.handlers.RotatingFileHandler("Logs/     TGBot.log", maxBytes=10485760, backupCount=0),
    logging.StreamHandler()])

# –°–æ–∑–¥–∞—ë–º Telegram –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä:
Bot = aiogram.Bot("5891681954:AAHnkOkVpyRI3oZjwckgHiGwZnmwF_gfk4M")
DP = aiogram.Dispatcher(Bot, storage=MemoryStorage())


class UserState(StatesGroup):  # –°–æ–∑–¥–∞—ë–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
    item_name = State()  


@DP.message_handler(commands=["start"])      # –ö–û–ì–î–ê –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨ –ü–ò–®–ï–¢ /start
async def start(msg: Message):

    keyboard = ReplyKeyboardMarkup()
    keyboard.add(*['–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞', '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é'])
    await msg.answer("–ü—Ä–∏–≤–µ—Ç!üëã \n\n–Ø Telegram –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–∞—Ä—Å–∏—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–∞–≥–∞–∑–∏–Ω ekom.uz –∏ –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –±—ã—Å—Ç—Ä–æ –≤—ã–±—Ä–∞—Ç—å –∂–µ–ª–∞–µ–º—ã–π —Ç–æ–≤–∞—Ä!", reply_markup=keyboard)


@DP.message_handler()
async def ReplyKeyboard_handling(msg: Message):  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã


    if msg.text == '–í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞':
        keyboard = InlineKeyboardMarkup()
        for category in categories:
            keyboard.add(aiogram.types.InlineKeyboardButton(
                text=category["category"],
                callback_data=category["link"]
            ))

        await msg.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", reply_markup=keyboard)

    if msg.text == '–ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏—é':
        keyboard = InlineKeyboardMarkup()
        for category in categories:
            keyboard.add(aiogram.types.InlineKeyboardButton(
                text=category["category"],
                callback_data="search" + category["link"]
            ))

        await msg.answer("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: ", reply_markup=keyboard)


@DP.message_handler(state=UserState.item_name)  # –ö–æ–≥–¥–∞ –ø–æ—è–≤–ª—è–µ—Ç—Å—è —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å item_name
async def search_by_item_name(msg: Message, state: FSMContext, page=1):
    if page == 1:
        message = await msg.answer("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ üîÑ")
        await state.update_data(msg_id=message.message_id)
        
    data = await state.get_data()
    await Bot.edit_message_text(chat_id=msg.from_user.id, message_id=data["msg_id"], text=f"–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–∞–Ω–∏—Ü—É {page + 1} üîÑ")
    try:
        urllib.request.urlopen(data["url"] + "page-" + str(page))
        items = get_items(html.text, data["url"] + "page-" + str(page))
        for i in items:
            if i["name"] == msg.text:
                await Bot.send_photo(chat_id=msg.from_user.id, caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {i["name"]} \n–°—Å—ã–ª–∫–∞: {i["link"]}\n–¶–µ–Ω–∞: {i["price"]}\n–ù–∞–ª–∏—á–∏–µ: {i["availability"]}', photo=i["photo"])
                break
        else:
            await search_by_item_name(msg, state, page + 1)

    except:
        await msg.answer("–ü–æ –¥–∞–Ω–Ω–æ–º—É –∑–∞–ø—Ä–æ—Å—É –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∏—á–µ–≥–æ –Ω–∞–π—Ç–∏.")

    await state.finish()


@DP.callback_query_handler()
async def callback_worker(call: CallbackQuery, state: FSMContext):

    keyboard = InlineKeyboardMarkup()

    if call.data.startswith("search"):
        await state.update_data(url=call.data[6:])
        await call.message.edit_text("–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—á–µ—à—å –Ω–∞–π—Ç–∏")
        await UserState.item_name.set()

    elif call.data in [i["link"] for i in categories]:

        data = await state.get_data()
        await state.update_data(url=call.data)

        for i in range(1, 6):
            try:
                urllib.request.urlopen(call.data + "page-" + str(i))
                keyboard.add(aiogram.types.InlineKeyboardButton(
                    text=i,
                    callback_data=int(i)))
            except:
                pass

        await call.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å: ", reply_markup=keyboard)
        
    else:
        call.data = int(call.data)
        data = await state.get_data()
        items = get_items(html.text, data["url"] + "page-" + str(call.data))

        for item in items:
            try:
                await Bot.send_photo(chat_id=call.from_user.id, caption=f'–ù–∞–∑–≤–∞–Ω–∏–µ: {item["name"]} \n–°—Å—ã–ª–∫–∞: {item["link"]}\n–¶–µ–Ω–∞: {item["price"]}\n–ù–∞–ª–∏—á–∏–µ: {item["availability"]}', photo=item["photo"])
            except:
                break

        for i in range(call.data + 1, call.data + 6):
            try:
                urllib.request.urlopen(data["url"] + "page-" + str(i))
                keyboard.add(aiogram.types.InlineKeyboardButton(
                    text=i,
                    callback_data=i))
            except:
                return

        await Bot.send_message(call.from_user.id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å: ", reply_markup=keyboard)



if __name__ == "__main__":  # –ï—Å–ª–∏ —Ñ–∞–π–ª –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–π, –∞ –Ω–µ –∫–∞–∫ –º–æ–¥—É–ª—å
    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")  # –í –∫–æ–Ω—Å–æ–ª–µ –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–æ–∂—ë–Ω –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    executor.start_polling(  # –ë–æ—Ç –Ω–∞—á–∏–Ω–∞–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
        dispatcher=DP,  # –ü–µ—Ä–µ–¥–∞–µ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –¥–∏—Å–ø–µ—Ç—á–µ—Ä
        # (–¥–∏—Å–ø–µ—Ç—á–µ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ —Ç–æ, —á—Ç–æ–±—ã —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ—Ö–æ–¥–∏–ª–∏ –¥–æ –±–æ—Ç–∞)
        on_startup=logger.info("–ó–∞–≥—Ä—É–∑–∏–ª—Å—è —É—Å–ø–µ—à–Ω–æ!"), skip_updates=True)
    # –ï—Å–ª–∏ –±–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è, —Ç–æ –≤ –∫–æ–Ω—Å–æ–ª—å –≤—ã–≤–µ–¥–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ